outfilename = 'Inc/bitrev.h'
min_bits = 3
max_bits = 14
table_name = 'bit_rev_table'

def reverse(i, bits):
    reversed = 0
    for bit in range(bits-1, -1, -1):
        if (i & (1<<bit)):
            reversed |= (1<<(bits-bit-1))
    return reversed

def gen_table(bits):
    table = 'const uint16_t __%s_%s[%s] = {\n' % (table_name, str(bits), str(int(pow(2, bits))))
    rows = int(pow(2, bits-3))  # in each row should be 8 entries
    for row in range(rows):
        table += '    '
        for col in range(8):
            i = row * 8 + col
            table += '{}, '.format(reverse(i, bits))
        table += '\n'
    table = table[:-3]  # remove last \n, colon and whitespace.
    table += '\n};\n'
    return table


def gen_summary_table():
    table = 'const uint16_t* %s[%s] = {\n' % (table_name, str(max_bits + 1))
    for _ in range(min_bits):
        table += '    NULL,\n'
    for bits in range(min_bits, max_bits+1):
        table += '    __%s_%s,\n' % (table_name, str(bits))
    table = table[:-2]
    table += '\n};'
    return table


def main():
    with open(outfilename, 'w') as f:
        f.write('/* Generated by "generate_bit_rev_table.py". Consider changing the script for modifications. */\n')
        f.write('#ifndef BITREV_H_\n')
        f.write('#define BITREV_H_\n\n')
        f.write('#include "fft.h"\n')
        f.write('#if MIN_FFT_BITS < {} || MAX_FFT_BITS > {}\n'.format(min_bits, max_bits))
        f.write('#error "Not enough bitrev tables for all allowed fft sizes"\n')
        f.write('#endif\n\n')
        for bits in range(min_bits, max_bits+1):
            table = gen_table(bits)
            f.write(table + '\n')
        f.write(gen_summary_table() + '\n')
        f.write('#endif\n')


if __name__ == '__main__':
    main()
